name: Auto Create Pull Request from develop to main

on:
  push:
    branches:
      - develop
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Busca todo o hist√≥rico para comparar branches

      - name: Setup Git and fetch branches
        run: |
          # Configura Git e busca todas as branches
          git fetch origin
          git branch -r

          # Verifica se as branches existem
          if ! git show-ref --verify --quiet refs/remotes/origin/main; then
            echo "‚ùå Branch origin/main n√£o encontrada!"
            exit 1
          fi

          if ! git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "‚ùå Branch origin/develop n√£o encontrada!"
            exit 1
          fi

          echo "‚úÖ Branches verificadas com sucesso"

      - name: Check if PR already exists
        id: check-pr
        run: |
          # Verifica se j√° existe um PR aberto de develop para main
          existing_pr=$(gh pr list --base main --head develop --state open --json number --jq '.[0].number')
          if [ -n "$existing_pr" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: steps.check-pr.outputs.pr_exists == 'false'
        run: |
          # Verifica se h√° diferen√ßas entre as branches
          if git diff --quiet origin/main...origin/develop; then
            echo "‚ö†Ô∏è N√£o h√° diferen√ßas entre origin/main e origin/develop"
            echo "Pulando cria√ß√£o do PR"
            exit 0
          fi

          # Obt√©m informa√ß√µes dos √∫ltimos commits usando refer√™ncias remotas
          commit_count=$(git rev-list --count origin/main..origin/develop)
          last_commit_msg=$(git log -1 --pretty=format:"%s" origin/develop)

          # Cria o corpo do PR com informa√ß√µes dos commits
          pr_body="## üöÄ Automatic Pull Request from develop to main

          Esta √© uma solicita√ß√£o de pull autom√°tica criada quando a branch \`develop\` foi atualizada.

          ### üìä Resumo das altera√ß√µes:
          - **Commits √† frente de main:** $commit_count
          - **√öltimo commit:** $last_commit_msg

          ### üìù Commits inclu√≠dos:
          $(git log origin/main..origin/develop --oneline --max-count=10)

          ### ‚úÖ Checklist:
          - [ ] C√≥digo revisado
          - [ ] Testes passando
          - [ ] Documenta√ß√£o atualizada
          - [ ] Ready para produ√ß√£o

          ---
          *Este PR foi criado automaticamente pela GitHub Action*"

          # Cria o PR
          gh pr create \
            --base main \
            --head develop \
            --title "üîÑ Auto-merge: develop ‚Üí main" \
            --body "$pr_body" \
            --label "auto-generated,merge-candidate"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing Pull Request
        if: steps.check-pr.outputs.pr_exists == 'true'
        run: |
          # Verifica se h√° diferen√ßas entre as branches
          if git diff --quiet origin/main...origin/develop; then
            echo "‚ö†Ô∏è N√£o h√° diferen√ßas entre origin/main e origin/develop"
            echo "Mantendo PR existente sem atualiza√ß√µes"
            exit 0
          fi

          # Atualiza o PR existente com novas informa√ß√µes usando refer√™ncias remotas
          commit_count=$(git rev-list --count origin/main..origin/develop)
          last_commit_msg=$(git log -1 --pretty=format:"%s" origin/develop)

          pr_body="## üöÄ Automatic Pull Request from develop to main (Atualizado)

          Esta √© uma solicita√ß√£o de pull autom√°tica criada quando a branch \`develop\` foi atualizada.

          ### üìä Resumo das altera√ß√µes:
          - **Commits √† frente de main:** $commit_count
          - **√öltimo commit:** $last_commit_msg
          - **√öltima atualiza√ß√£o:** $(date)

          ### üìù Commits inclu√≠dos:
          $(git log origin/main..origin/develop --oneline --max-count=10)

          ### ‚úÖ Checklist:
          - [ ] C√≥digo revisado
          - [ ] Testes passando
          - [ ] Documenta√ß√£o atualizada
          - [ ] Ready para produ√ß√£o

          ---
          *Este PR foi criado automaticamente pela GitHub Action*"

          gh pr edit ${{ steps.check-pr.outputs.pr_number }} --body "$pr_body"

          echo "‚úÖ PR #${{ steps.check-pr.outputs.pr_number }} atualizado com sucesso!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}